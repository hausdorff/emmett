"""
Generates a statistical model of the Python `if` statement, based on some
corpus of Python code we have.
"""

from __future__ import with_statement
import collections, glob, re
import lisp_parser


PARSED_IF_STMTS = 'data/ifprs/*.prs'


def if_asts ():
    """Gets all parsed `if` statements, return Python representation of parse
    tree. Each tree is paired with the original source and the filename.

    Specifically, the the `if` statements each have their own file, and they're
    represented as a lispy tree. This function just turns that lispy tree into
    a Python tree."""
    data = []
    for f in glob.glob(PARSED_IF_STMTS):
        with open(f) as fh:
            src = fh.read()
        data.append((lisp_parser.read(src), src, f))
    return data

def countup (data):
    """Builds a histogram counting the times different features have occurred."""
    counts = collections.Counter()
    for tree,src,f in data:
        print f, '\n'
        walk_and_countup(tree, counts)
    return counts

def walk_and_countup (tree, counts):
    """Walks tree, counting what things are generated by what things"""
    if not tree: return

    head = head_of(tree)

    if not head: return (tree, None)
    elif len(tree) == 1:
        entry = (head, None)
    else:
        for child in tree[1:]:
            entry = (head, head_of(child))
            #print child
            print entry
            counts[entry] += 1
            walk_and_countup(child, counts)

def head_of (tree):
    return tree[0] if isinstance(tree, list) else None


if __name__ == '__main__':
    print countup(if_asts())
    #print if_asts()[0]
